" don't bother with vi compatibility
set nocompatible

" enable syntax highlighting
syntax enable

" Screw vundle, use pathogen
" TODO(dylan): this square vimcfg is unmaintained. I should start building my
" own
execute pathogen#infect()

set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set backupcopy=yes                                           " see :help crontab
set clipboard=unnamed                                        " yank and paste with the system clipboard
set directory-=.                                             " don't store swapfiles in the current directory
set encoding=utf-8
set noexpandtab                                              " don't expand tabs to spaces
set nocursorline                                             " don't highlight current line
set hlsearch                                                 " highlight search by default
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:•
set number                                                   " show line numbers
set ruler                                                    " show where you are
set scrolloff=3                                              " show context above/below cursorline
set shiftwidth=4                                             " normal mode indentation commands use 4 spaces
set showcmd
set smartcase                                                " case-sensitive search if any caps
set softtabstop=4                                            " insert mode tab and backspace use 4 spaces
set tabstop=4                                                " actual tabs occupy 4 characters
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest,list,full

set colorcolumn=81 " Because it makes it a clear barrier at 80 characters, instead of higlighting the 80th
set textwidth=80

" Execute this after the above settings so autodetected indents, etc override
" default settings. AKA: Prefer the way the file _already is_ to my style guide
filetype plugin indent on
let g:detectindent_preferred_expandtab = 1
autocmd BufRead,BufNewFile * DetectIndent

" Display a pretty statusline if we can
if has('title')
   set title
endif
set shortmess=atI
if has('statusline')
   set statusline=%<%F\ %r[%{&ff}]%y%m\ %=\ Line\ %l\/%L\ Col:\ %v\ (%P)
endif

" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif

" Enable spellcheck
set spelllang=en_us        " US English Spelling
set spell                  " Default spelling on

" keyboard shortcuts
let mapleader = ','
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Double j in insert mode is generally an indicator of an intent to be in
" command mode (this applies for many combos of hjkl, but jj in particular
" doesn't seem to come up in normal code; honestly I can probably kill this)
inoremap jj <ESC>

" in visual mode tab indents selection, shift-tab unindents
vmap <silent> <Tab> >gv
vmap <silent> <S-Tab> <gv

" Y yanks to end of line
map Y y$

" some emacs-isms are OK
map! <C-a> <Home>
map  <C-a> <Home>
map! <C-e> <End>
map  <C-e> <End>

" Toggle numbers with F12
nmap <silent> <F12> :silent set number!<CR>
imap <silent> <F12> <C-O>:silent set number!<CR>
" Toggle hlsearch with F4
noremap <silent> <F4> :set hls!<CR>
" Toggle spellchecking with F10
nmap <silent> <F10> :silent set spell!<CR>
imap <silent> <F10> <C-O>:silent set spell!<CR>

" Map <C-n> to NERDTree
map <C-n> :NERDTreeToggle<CR>

" w!! to forcibly write a file with sudo
cnoremap w!! %!sudo tee > /dev/null %

" plugin settings
let g:ctrlp_match_window = 'order:ttb,max:20'
let g:NERDSpaceDelims=1
let g:gitgutter_enabled = 0

" Filetype Overrides
" TODO: some of these may now be automatic, but at one time they were needed
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.jsx
" gs is Google Apps Script. Which is _basically_ ES5...just use the JS formatter
autocmd BufNewFile,BufRead *.gs set filetype=javascript

" Fix Cursor in TMUX
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" :W and :Q are annoying
if has('user_commands')
   command! -nargs=0 -bang Q q<bang>
   command! -nargs=0 -bang W w<bang>
   command! -nargs=0 -bang WQ wq<bang>
   command! -nargs=0 -bang Wq wq<bang>
endif

" Map <C-n> to NERDTree
map <C-n> :NERDTreeToggle<CR>

" Don't copy the contents of an overwritten selection.
vnoremap p "_dP

" Use solarized theme only if we have 256 bit colors and a GUI. Originally, this
" was to ensure things looked OK
" This probably needs to be expanded to capture my Windows and Linux terminal
" emulators as well, but for now, leave it.
if (&t_Co == 256 || has('gui_running'))
  colorscheme solarized
else
  colorscheme desert
endif

" This is a hacky way to read whether I'm in light or dark mode on my terminal.
" Practically, almost everything I use is in dark mode unless I'm taking
" screenshots, so it should be fine, but might be worth revisiting in the
" future.
if ($ITERM_PROFILE == 'Light')
  set background=light
else
  set background=dark
endif

" As a workaround to the above hack, alias Bkl and Bkd to swap backgrounds
command -nargs=0 Bkl set background=light
command -nargs=0 Bkd set background=dark

" Tell ALE to use the local prettier config
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_fixers = {}
let g:ale_fixers['typescript'] = ['prettier', 'tslint']
let g:ale_fixers['python'] = ['yapf']
let g:ale_fix_on_save = 1

" Tell ALE to use stylelint in JSX/TSX (for styled components)
let g:ale_linters = {'jsx': ['stylelint', 'tslint']}
let g:ale_linter_aliases = {'jsx': 'css'}

" Load local vimrc if one is present
" Since this is now just my personal vimrc, I only use local for things that
" should remain system-specific, like a company style guide override for a work
" laptop
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
